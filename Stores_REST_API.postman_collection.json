{
	"info": {
		"_postman_id": "544c8eae-77cf-42de-99d0-28b223145ddd",
		"name": "Stores REST API Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register and Authenticate",
			"item": [
				{
					"name": "/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "529325dd-df79-46e7-8ba9-4d09a3c2d86b",
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\")\r",
									"tests['Response time is less than 200ms'] = responseTime < 200;\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"User created Successfully\"] = jsonData.message === 'User created successfully';\r",
									"\r",
									"tests['Content type is present in response']  = postman.getResponseHeader('Content-Type');\r",
									"\r",
									"tests['Content type is application/json']  = postman.getResponseHeader('Content-Type') === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user5\",\r\n    \"password\": \"abcxyz\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						},
						"description": "endpoint for user registration"
					},
					"response": []
				},
				{
					"name": "/auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e51df5e6-72a8-4b8e-a648-2be3cc59a242",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\")\r",
									"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user1\",\r\n    \"password\": \"abcxyz\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "authentication endpoint"
					},
					"response": []
				}
			],
			"description": "Test whether the user can register and authenticate successfully",
			"protocolProfileBehavior": {}
		},
		{
			"name": "User create store and item",
			"item": [
				{
					"name": "/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f39bfa4-24f3-42ea-a119-315a87a17f2e",
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\")\r",
									"tests['Response time is less than 200ms'] = responseTime < 200;\r",
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"tests[\"User created Successfully\"] = jsonData.message === 'User created successfully';\r",
									"\r",
									"tests['Content type is present in response']  = postman.getResponseHeader('Content-Type');\r",
									"\r",
									"tests['Content type is application/json']  = postman.getResponseHeader('Content-Type') === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user4\",\r\n    \"password\": \"abcxyz\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						},
						"description": "endpoint for user registration"
					},
					"response": []
				},
				{
					"name": "/auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b45d2a05-0db9-49dd-96b1-2e2ddb0ab1c1",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\")\r",
									"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "JWT",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user4\",\r\n    \"password\": \"abcxyz\"\r\n\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "authentication endpoint"
					},
					"response": []
				},
				{
					"name": "/store/test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a5d9565-1915-4108-a89f-6f55eae4f0af",
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"tests[\"Store name is returned\"] = jsonData.name ==='test_store';\r",
									"tests[\"Store id is returned\"] = jsonData.id ===1;\r",
									"tests[\"Store items are an empty list\"] = jsonData.items.length === 0;\r",
									"tests[\"Successful POST request\"] = responseCode.code === 201;\r",
									"tests[\"response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"tests[\"Content Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"\r",
									"tests[\"Content Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") ==== \"application/json\"\r",
									"\r",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						},
						"description": "A post request to create a store"
					},
					"response": []
				},
				{
					"name": "/item/test_item in test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9065089-af44-4da6-9837-665e46aa2021",
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"tests[\"item name is returned\"] = jsonData.name ==='test_item';\r",
									"tests[\"Item price is returned\"] = jsonData.price === 17.99;\r",
									"\r",
									"tests[\"Successful POST request\"] = responseCode.code === 201;\r",
									"tests[\"response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"tests[\"Content Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"\r",
									"tests[\"Content Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") ==== \"application/json\"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 17.99,\r\n    \"store_id\": {{store_id}}\r\n}"
						},
						"url": {
							"raw": "{{url}}/item/test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"test_item"
							]
						},
						"description": "A post request to create a store"
					},
					"response": []
				},
				{
					"name": "/stores",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a61473db-3e6c-4935-ae45-397b038c171b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"tests[\"Store test_store is returned\"] = jsonData.stores[0].name ==='test_store';\r",
									"tests[\"ID of store 'test_store' is returned\"] = jsonData.stores[0].id === parseInt(environment.store_id);\r",
									"tests[\"Item 'test_item' is returned inside test_store \"] = jsonData.stores[0].items[0].name === 'test_item';\r",
									"tests[\"Item price is returned\"] = jsonData.price === 17.99;\r",
									"\r",
									"\r",
									"tests[\"Successful POST request\"] = responseCode.code === 200;\r",
									"tests[\"response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"tests[\"Content Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"\r",
									"tests[\"Content Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") ==== \"application/json\"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						},
						"description": "A post request to create a store"
					},
					"response": []
				},
				{
					"name": "/item/my_item Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd79f1a6-88bc-4de5-8044-6b500d8eff2c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Message is returned\"] = jsonData.message === 'Item deleted';\r",
									"\r",
									"tests[\"Successful POST request\"] = responseCode.code === 200;\r",
									"\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"                \r",
									"\r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/item/my_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"my_item"
							]
						},
						"description": "delete item\r\n"
					},
					"response": []
				},
				{
					"name": "/store/<name> copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a70b554d-115f-4cc0-82a5-963b3a859eaf",
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Store name is returned\"] = jsonData.message === 'Store deleted';\r",
									"\r",
									"tests[\"Successful POST request\"] = responseCode.code === 200;\r",
									"\r",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
									"\r",
									"            \r",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
									"\r",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader(\"Content-Type\") === 'application/json';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"test_store"
							]
						},
						"description": "delete item\r\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "/register Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04fce839-fa22-44a4-9a8d-2d86f06104fc",
						"exec": [
							"postman.clearEnvironmentVariable(\"access_token\")\r",
							"tests['Response time is less than 200ms'] = responseTime < 200;\r",
							"\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"tests[\"User created Successfully\"] = jsonData.message === 'User created successfully';\r",
							"\r",
							"tests['Content type is present in response']  = postman.getResponseHeader('Content-Type');\r",
							"\r",
							"tests['Content type is application/json']  = postman.getResponseHeader('Content-Type') === 'application/json';"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user4\",\r\n    \"password\": \"abcxyz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				},
				"description": "endpoint for user registration"
			},
			"response": []
		},
		{
			"name": "/auth Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db51d705-c64c-47eb-a4c1-7ecc6ef04ff5",
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"tests[\"Body contains access_token\"] = responseBody.has(\"access_token\")\r",
							"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user4\",\r\n    \"password\": \"abcxyz\"\r\n\r\n}"
				},
				"url": {
					"raw": "{{url}}/auth",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "authentication endpoint"
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/store/my_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"my_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}/store/my_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"my_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/store/my_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"my_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/<name>",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price\" : 17.99,\r\n    \"store_id\" : 3\r\n}"
				},
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/item/my_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"my_item"
					]
				},
				"description": "delete item\r\n"
			},
			"response": []
		},
		{
			"name": "/items",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/items",
					"host": [
						"{{url}}"
					],
					"path": [
						"items"
					]
				},
				"description": "Get all the items"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}